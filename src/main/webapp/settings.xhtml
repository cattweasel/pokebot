<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:c="http://java.sun.com/jsp/jstl/core"
	xmlns:f="http://java.sun.com/jsf/core">
<ui:composition template="template.xhtml">
	<ui:define name="header">
		<ui:fragment rendered="#{base.loggedInUser ne null}">
			<script type="text/javascript">
			
			var savePokemonSettings = function() {
				Ext.MessageBox.confirm('#{msgs.confirmation}', '#{msgs.confirm_settings_save}', function(a) {
					if ("yes" === a) {
						var params = {};
						params['userId'] = '#{base.loggedInUser.id}';
						var items = Ext.StoreMgr.lookup('pokemon-store').data.items;
						for (var i=0; i&lt;items.length; i++) {
							params[items[i].data.pokemonId + "-enabled"] = items[i].data.enabled;
							params[items[i].data.pokemonId + "-range"] = items[i].data.range;
						}
						Ext.Ajax.request({
							url: '#{request.contextPath}/rest/user/settings/savePokemon',
						    params: params,
						    success: function(response) {
						        var json = Ext.decode(response.responseText);
						        if (json.success === true) {
						        		document.location = document.location;
						        } else {
						        		Ext.Msg.alert('#{msgs.error}', json.message);
						        }
						    }
						});
					}
				});
			};
			
			var save = function(fields) {
				Ext.MessageBox.confirm('#{msgs.confirmation}', '#{msgs.confirm_settings_save}', function(a) {
					if ("yes" === a) {
						var params = {};
						params['userId'] = '#{base.loggedInUser.id}';
						for (var i=0; i&lt;fields.length; i++) {
							params[fields[i]] = Ext.getCmp(fields[i]).getValue();
						}
						Ext.Ajax.request({
							url: '#{request.contextPath}/rest/user/settings/save',
						    params: params,
						    success: function(response) {
						        var json = Ext.decode(response.responseText);
						        if (json.success === true) {
						        		document.location = document.location;
						        } else {
						        		Ext.Msg.alert('#{msgs.error}', json.message);
						        }
						    }
						});
					}
				});
			};
			
			Ext.onReady(function() {
				
				var languageStore = Ext.create('Ext.data.Store', {
				    fields: ['id', 'name'],
				    data : [
				        { "id": "de", "name": "#{msgs.language_de}" },
				        { "id": "en", "name": "#{msgs.language_en}" }
				    ]
				});
				
				var selectionStore = Ext.create('Ext.data.Store', {
				    fields: ['id', 'name'],
				    data : [
				        { "id": "all", "name": "#{msgs.all}" },
				        { "id": "selected", "name": "#{msgs.selected}" },
				        { "id": "unselected", "name": "#{msgs.unselected}" }
				    ]
				});
				
				var profileStore = Ext.create('Ext.data.Store', {
				    model: 'Profile',
				    id: 'profile-store',
				    proxy: {
				        type: 'ajax',
				        url: '#{request.contextPath}/rest/profile/list',
				        reader: {
				            type: 'json',
				            rootProperty: 'objects',
				            successProperty: 'success',
				            totalProperty: 'total'
				        },
				        extraParams: {
				        		userId: '#{base.loggedInUserId}'
				        }
				    },
				    remoteSort: true,
				    pageSize: 20,
					autoLoad: true
				});
				
				var pokemonStore = Ext.create('Ext.data.Store', {
				    model: 'PokemonSetting',
				    id: 'pokemon-store',
				    proxy: {
				        type: 'ajax',
				        url: '#{request.contextPath}/rest/user/settings/pokemon/list',
				        reader: {
				            type: 'json',
				            rootProperty: 'objects',
				            successProperty: 'success',
				            totalProperty: 'total'
				        },
				        extraParams: {
				        		userId: '#{base.loggedInUserId}'
				        }
				    },
				    remoteSort: true,
				    pageSize: 20,
					autoLoad: true
				});
				
				Ext.create("Ext.form.FormPanel", {
		  			renderTo: Ext.get('content'),
		  			title: '#{msgs.settings_global_settings}',
		  			width: '100%',
		  			bodyPadding: 10,
		  			layout: 'anchor',
		  		    defaults: {
		  		        anchor: '100%',
		  		        labelWidth: 260
		  		    },
		  		  	bbar: ['->', {
		    				xtype: 'button',
	  		    			text: '#{msgs.save_settings}',
	  		    			handler: function() {
	  		    				var fields = [];
	  		    				fields.push("deleteExpired");
	  		    				fields.push("language");
	  		    				save(fields);
	  		    			}
	  		    		}],
		  			items: [{
		  				xtype: 'checkbox',
		  				id: 'deleteExpired',
		  				fieldLabel: '#{msgs.settings_delete_expired_messages}',
		  				value: #{settings.deleteExpired}
		  			}, {
		  				xtype: 'combobox',
		  				id: 'language',
		  				fieldLabel: '#{msgs.settings_user_language}',
		  				value: '#{settings.language}',
		  				store: languageStore,
		  				displayField: 'name',
		  				valueField: 'id',
		  				forceSelection: true,
		  				allowBlank: false
		  			}]
				});
				
				Ext.create("Ext.form.FormPanel", {
		  			renderTo: Ext.get('content'),
		  			title: '#{msgs.settings_profile_settings}',
		  			width: '100%',
		  			style: {
		  				margin: '15px 0 0 0'
		  			},
		  			bodyPadding: 10,
		  			layout: 'anchor',
		  		    defaults: {
		  		        anchor: '100%',
		  		      	labelWidth: 260
		  		    },
			  		bbar: ['->', {
			    			xtype: 'button',
		  		    		text: '#{msgs.save_settings}',
		  		    		handler: function() {
		  		    			var fields = [];
	  		    				fields.push("createProfile");
	  		    				fields.push("loadProfile");
	  		    				fields.push("saveProfile");
	  		    				fields.push("deleteProfile");
	  		    				save(fields);
		  		    		}
		  		    	}],
		  			items: [{
		  				xtype: 'textfield',
		  				id: 'createProfile',
		  				fieldLabel: '#{msgs.settings_create_profile}',
		  				emptyText: '#{msgs.enter_profile_name} ..'
		  			}, {
		  				xtype: 'combobox',
		  				id: 'loadProfile',
		  				fieldLabel: '#{msgs.settings_load_profile}',
		  				emptyText: '#{msgs.select_profile} ..',
		  				store: profileStore,
		  				displayField: 'displayName',
		  				valueField: 'id',
		  				forceSelection: true
		  			}, {
		  				xtype: 'combobox',
		  				id: 'saveProfile',
		  				fieldLabel: '#{msgs.settings_save_profile}',
		  				emptyText: '#{msgs.select_profile} ..',
		  				store: profileStore,
		  				displayField: 'displayName',
		  				valueField: 'id',
		  				forceSelection: true
		  			}, {
		  				xtype: 'combobox',
		  				id: 'deleteProfile',
		  				fieldLabel: '#{msgs.settings_delete_profile}',
		  				emptyText: '#{msgs.select_profile} ..',
		  				store: profileStore,
		  				displayField: 'displayName',
		  				valueField: 'id',
		  				forceSelection: true
		  			}]
				});
				
				Ext.create("Ext.form.FormPanel", {
		  			renderTo: Ext.get('content'),
		  			title: '#{msgs.settings_raid_settings}',
		  			width: '100%',
		  			style: {
		  				margin: '15px 0 0 0'
		  			},
		  			bodyPadding: 10,
		  			layout: 'anchor',
		  		    defaults: {
		  		        anchor: '100%',
		  		      	labelWidth: 260
		  		    },
		  		    bbar: ['->', {
	  		    			xtype: 'button',
		  		    		text: '#{msgs.save_settings}',
		  		    		handler: function() {
		  		    			var fields = [];
	  		    				fields.push("gymEnabled");
	  		    				fields.push("gymLevel");
	  		    				fields.push("gymRange");
	  		    				save(fields);
		  		    		}
		  		    	}],
		  			items: [{
		  				xtype: 'checkbox',
		  				id: 'gymEnabled',
		  				fieldLabel: '#{msgs.settings_enable_raid_notifications}',
		  				value: #{settings.gymEnabled}
		  			}, {
		  				xtype: 'numberfield',
		  				id: 'gymLevel',
		  				fieldLabel: '#{msgs.settings_raid_min_level}',
		  				value: #{settings.gymLevel},
		  				minValue: 1,
		  				maxValue: 5
		  			}, {
		  				xtype: 'numberfield',
		  				id: 'gymRange',
		  				fieldLabel: '#{msgs.settings_raid_range}',
		  				value: #{settings.gymRange},
		  				minValue: 200,
		  				maxValue: 50000
		  			}]
				});
				
				Ext.create("Ext.grid.Panel", {
		  			renderTo: Ext.get('content'),
		  			title: '#{msgs.settings_pokemon_settings}',
		  			width: '100%',
		  			style: {
		  				margin: '15px 0 0 0'
		  			},
		  			store: pokemonStore,
		  			scrollable: false,
		  			selType: 'cellmodel',
		  		    plugins: [
		  		        Ext.create('Ext.grid.plugin.CellEditing', {
		  		            clicksToEdit: 1
		  		        })
		  		    ],
		  		    tbar: [{
		  		    		xtype: 'combobox',
		  		    		fieldLabel: '#{msgs.settings_show_pokemon}',
		  		    		store: selectionStore,
		  		    		displayField: 'name',
		  				valueField: 'id',
		  				forceSelection: true,
		  				allowBlank: false,
		  				value: 'all',
		  				disabled: true // TODO
		  		    }, {
		  		    		xtype: 'numberfield',
		  		    		id: 'global-range',
		  		    		fieldLabel: '#{msgs.settings_global_pokemon_range}',
		  		    		style: {
		  		    			margin: '0 0 0 15px'
		  		    		},
		  		    		labelWidth: 200,
		  		    		value: 3000,
		  		    		minValue: 200,
		  		    		maxValue: 50000,
		  		    		disabled: true // TODO
		  		    }, {
		  		    		xtype: 'button',
		  		    		text: '#{msgs.accept}',
		  		    		style: {
		  		    			margin: '0 0 0 15px'
		  		    		},
		  		    		disabled: true // TODO
		  		    }, '->', {
		  		    		xtype: 'button',
		  		    		text: '#{msgs.save_settings}',
		  		    		handler: function() {
		  		    			savePokemonSettings();
		  		    		}
		  		    }],
		  			columns: [{
		  				header: 'ID',
		  				dataIndex: 'pokemonId',
		  				width: 130
		  			}, {
		  				header: 'Name',
		  				dataIndex: 'displayName',
		  				sortable: false,
		  				width: 130
		  			}, {
		  				xtype: 'checkcolumn',
		  				header: '#{msgs.activated}',
		  				dataIndex: 'enabled',
		  				sortable: false,
		  				editor: {
	  				    		xtype: 'checkbox',
	  				    		cls: 'x-grid-checkheader-editor'
	  				  	},
	  				  	width: 150
		  			}, {
		  				header: '#{msgs.settings_pokemon_range}',
		  				dataIndex: 'range',
		  				sortable: false,
		  				editor: {
		  	                xtype: 'numberfield',
		  	                allowBlank: false,
		  	                minValue: 200,
		  	                maxValue: 50000
		  	            },
		  	            flex: 1
		  			}]
				});
				
			});
			
			</script>
		</ui:fragment>
	</ui:define>
	<ui:define name="content">
		<ui:fragment rendered="#{base.loggedInUser eq null}">
			<ui:include src="include/messagebox.xhtml">
				<ui:param name="title" value="#{msgs.not_logged_in}" />
				<ui:param name="content" value="#{msgs.login_instructions}" />
			</ui:include>
		</ui:fragment>
	</ui:define>
</ui:composition>
</html>
